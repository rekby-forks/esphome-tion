substitutions:
  # project version
  project_version: "{{ version_tion }}"
  # project branch
  project_branch: $project_version
  # project git source
  project_source: github://dentra/esphome-tion@$project_branch
  # project source refresh interval
  project_source_refresh: 12h
  # project identifier
  project_id: tion
  # node name
  node_name: $project_id
  # name for main entity and prefix for all others.
  friendly_name: $node_name
  # vport and additional components configuration parameters
  vport_version: "{{ version_vport }}"
  vport_source: github://dentra/esphome-components@$vport_version
  vport_source_refresh: 1d

esphome:
  name: $node_name
  friendly_name: $friendly_name
  comment: https://t.me/esphome_tion
  project:
    name: "dentra.$project_id-${tion_type}-${tion_conn}-${board_code}"
    version: "$project_version"
  min_version: "{{ version_esphome }}"
  platformio_options:
    build_flags:
      - -std=gnu++17
    build_unflags:
      - -std=gnu++11

preferences:
  flash_write_interval: 10min

wifi:
  ap:
captive_portal:

ota:
  - id: esphome_ota
    platform: esphome

external_components:
  - source: $vport_source
    components:
      - crash_info
      - etl
      - otax
      - vport
      - esp32_usb_dis
      - settings
      - coredump
      - partitions
      - cgp
      - nvs
      - setup
      - dtu
      - declaration
    refresh: $vport_source_refresh
  - source: $project_source
    refresh: $project_source_refresh

setup:
  - depends: mqtt as p_mqtt
    lambda: |-
      #ifdef TION_SPRUTHUB_SUPPORT
      const bool is_spruthub = true;
      #else
      const bool is_spruthub = false;
      #endif
      if (is_spruthub || App.is_name_add_mac_suffix_enabled()) {
        std::string topic_prefix;
        if (p_mqtt->get_topic_prefix() == "") {
          topic_prefix = str_sanitize(App.get_name());
        } else {
          topic_prefix = p_mqtt->get_topic_prefix();
        }
        p_mqtt->set_topic_prefix(topic_prefix);
        if (p_mqtt->is_log_message_enabled()) {
          auto log_topic = topic_prefix + "/debug";
          p_mqtt->set_log_message_template(mqtt::MQTTMessage{
            .topic = log_topic, .payload = "", .qos = 0, .retain = true
          });
        }
        auto status_topic = topic_prefix + (is_spruthub ? "/tion-status" : "/status");
        p_mqtt->set_birth_message(mqtt::MQTTMessage{
          .topic = status_topic, .payload = "online", .qos = 0, .retain = true
        });
        p_mqtt->set_last_will(mqtt::MQTTMessage{
          .topic = status_topic, .payload = "offline", .qos = 0, .retain = true
        });
        p_mqtt->set_shutdown_message(mqtt::MQTTMessage{
          .topic = status_topic, .payload = "offline", .qos = 0, .retain = true
        });
      }
